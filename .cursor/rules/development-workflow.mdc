---
description: Blue Star Development Workflow Guidelines - Feature development order and quality gates
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.json", "**/*.md"]
alwaysApply: true
---

# Blue Star - Development Workflow Guidelines

## Core Principles

### Incremental Development
- Make small, focused changes
- Test after each change
- Never make multiple changes without testing in between
- Maintain working state at all times

### Quality First
- TypeScript compilation MUST pass
- ESLint MUST pass without warnings
- All tests MUST pass
- Code MUST follow established patterns

## Quality Gates

### After Every Change
```bash
# Backend
npx tsc --noEmit          # TypeScript compilation
npm run lint              # ESLint validation
npm test                  # Unit tests

# Frontend
npx tsc --noEmit          # TypeScript compilation
npm run lint              # ESLint validation
npm test                  # Unit tests (if applicable)
```

### Before Committing
- [ ] All quality gates pass
- [ ] Code follows established patterns
- [ ] Tests are comprehensive and passing
- [ ] No console.log statements
- [ ] No TODO comments without issues
- [ ] Documentation is updated if needed

## Testing Strategy

### Unit Tests
- Test business logic in isolation
- Mock external dependencies
- Cover happy path, edge cases, and errors
- Use descriptive test names

### Integration Tests
- Test complete data flow
- Verify API contracts
- Test error handling end-to-end
- Validate authentication and authorization

## Code Review Process

### Self-Review Checklist
- [ ] Code follows established patterns
- [ ] All tests pass
- [ ] No linting errors
- [ ] No comments or console logs
- [ ] TypeScript compilation succeeds
- [ ] Error handling is comprehensive
- [ ] Performance considerations addressed

### Review Focus Areas
- [ ] Architecture compliance
- [ ] Test coverage and quality
- [ ] Error handling and edge cases
- [ ] Security considerations
- [ ] Performance implications
- [ ] Code maintainability

## Common Workflows

### Adding New Feature
1. Create feature branch from main
2. Follow development order (backend → frontend)
3. Write tests as you go
4. Run quality gates after each step
5. Create pull request when complete
6. Address review feedback

### Refactoring
1. Ensure comprehensive test coverage
2. Make small, incremental changes
3. Run tests after each change
4. Verify functionality still works
5. Update documentation if needed

## Anti-Patterns to Avoid

### What NOT to Do
- ❌ Making multiple changes without testing
- ❌ Skipping quality gates
- ❌ Writing code without tests
- ❌ Ignoring linting errors
- ❌ Bypassing established patterns
- ❌ Committing broken code

### What TO Do
- ✅ Test after every change
- ✅ Follow quality gates religiously
- ✅ Write tests first when possible
- ✅ Fix linting errors immediately
- ✅ Follow established patterns
- ✅ Keep code in working state

## Success Metrics

### Code Quality
- Zero TypeScript compilation errors
- Zero ESLint warnings
- All tests passing

### Development Velocity
- Small, focused commits
- Quick feedback loops
- Minimal debugging time
- Fast build and test cycles

### Maintainability
- Clear, readable code
- Consistent patterns
- Minimal technical debt

Remember: **Quality first**, **test frequently**, and **maintain working state** at all times!